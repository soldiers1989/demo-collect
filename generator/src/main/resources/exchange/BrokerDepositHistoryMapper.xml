<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.juzix.jungle.exchange.dao.BrokerDepositHistoryMapper">
  <resultMap id="BaseResultMap" type="com.juzix.jungle.exchange.entity.BrokerDepositHistory">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="broker_code" jdbcType="VARCHAR" property="brokerCode" />
    <result column="coin" jdbcType="VARCHAR" property="coin" />
    <result column="volume" jdbcType="DECIMAL" property="volume" />
    <result column="from_address" jdbcType="VARCHAR" property="fromAddress" />
    <result column="to_address" jdbcType="VARCHAR" property="toAddress" />
    <result column="deposit_time" jdbcType="TIMESTAMP" property="depositTime" />
    <result column="deposit_hash" jdbcType="VARCHAR" property="depositHash" />
    <result column="confirm_time" jdbcType="TIMESTAMP" property="confirmTime" />
    <result column="confirm_hash" jdbcType="VARCHAR" property="confirmHash" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_deposit_history
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.juzix.jungle.exchange.entity.BrokerDepositHistory">
    insert into broker_deposit_history (id, broker_code, coin, 
      volume, from_address, to_address, 
      deposit_time, deposit_hash, confirm_time, 
      confirm_hash, create_time)
    values (#{id,jdbcType=INTEGER}, #{brokerCode,jdbcType=VARCHAR}, #{coin,jdbcType=VARCHAR}, 
      #{volume,jdbcType=DECIMAL}, #{fromAddress,jdbcType=VARCHAR}, #{toAddress,jdbcType=VARCHAR}, 
      #{depositTime,jdbcType=TIMESTAMP}, #{depositHash,jdbcType=VARCHAR}, #{confirmTime,jdbcType=TIMESTAMP}, 
      #{confirmHash,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.juzix.jungle.exchange.entity.BrokerDepositHistory">
    update broker_deposit_history
    set broker_code = #{brokerCode,jdbcType=VARCHAR},
      coin = #{coin,jdbcType=VARCHAR},
      volume = #{volume,jdbcType=DECIMAL},
      from_address = #{fromAddress,jdbcType=VARCHAR},
      to_address = #{toAddress,jdbcType=VARCHAR},
      deposit_time = #{depositTime,jdbcType=TIMESTAMP},
      deposit_hash = #{depositHash,jdbcType=VARCHAR},
      confirm_time = #{confirmTime,jdbcType=TIMESTAMP},
      confirm_hash = #{confirmHash,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, broker_code, coin, volume, from_address, to_address, deposit_time, deposit_hash, 
    confirm_time, confirm_hash, create_time
    from broker_deposit_history
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, broker_code, coin, volume, from_address, to_address, deposit_time, deposit_hash, 
    confirm_time, confirm_hash, create_time
    from broker_deposit_history
  </select>
</mapper>