<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.juzix.jungle.exchange.dao.BrokerNodeMapper">
  <resultMap id="BaseResultMap" type="com.juzix.jungle.exchange.entity.BrokerNode">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="broker_code" jdbcType="VARCHAR" property="brokerCode" />
    <result column="callback_endpoint" jdbcType="VARCHAR" property="callbackEndpoint" />
    <result column="ip_white_list" jdbcType="VARCHAR" property="ipWhiteList" />
    <result column="max_tps" jdbcType="VARCHAR" property="maxTps" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from broker_node
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.juzix.jungle.exchange.entity.BrokerNode">
    insert into broker_node (id, broker_code, callback_endpoint, 
      ip_white_list, max_tps, status, 
      create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{brokerCode,jdbcType=VARCHAR}, #{callbackEndpoint,jdbcType=VARCHAR}, 
      #{ipWhiteList,jdbcType=VARCHAR}, #{maxTps,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.juzix.jungle.exchange.entity.BrokerNode">
    update broker_node
    set broker_code = #{brokerCode,jdbcType=VARCHAR},
      callback_endpoint = #{callbackEndpoint,jdbcType=VARCHAR},
      ip_white_list = #{ipWhiteList,jdbcType=VARCHAR},
      max_tps = #{maxTps,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, broker_code, callback_endpoint, ip_white_list, max_tps, status, create_time, 
    update_time
    from broker_node
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, broker_code, callback_endpoint, ip_white_list, max_tps, status, create_time, 
    update_time
    from broker_node
  </select>
</mapper>