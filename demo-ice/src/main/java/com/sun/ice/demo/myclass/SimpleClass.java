// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `myclass.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.sun.ice.demo.myclass;

public class SimpleClass extends Ice.ObjectImpl
{
    public SimpleClass()
    {
        myint = 10;
        mystr = "aaa";
    }

    public SimpleClass(short myshort, int myint, String mystr, long mylong)
    {
        this.myshort = myshort;
        this.myint = myint;
        this.mystr = mystr;
        this.mylong = mylong;
    }

    private static class __F implements Ice.ObjectFactory
    {
        public Ice.Object create(String type)
        {
            assert(type.equals(ice_staticId()));
            return new SimpleClass();
        }

        public void destroy()
        {
        }
    }
    private static Ice.ObjectFactory _factory = new __F();

    public static Ice.ObjectFactory
    ice_factory()
    {
        return _factory;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::myclass::SimpleClass"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.writeShort(myshort);
        __os.writeInt(myint);
        __os.writeString(mystr);
        __os.writeLong(mylong);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        myshort = __is.readShort();
        myint = __is.readInt();
        mystr = __is.readString();
        mylong = __is.readLong();
        __is.endReadSlice();
    }

    public short myshort;

    public int myint;

    public String mystr;

    public long mylong;

    public SimpleClass
    clone()
    {
        return (SimpleClass)super.clone();
    }

    public static final long serialVersionUID = -1915133579L;
}
